(() => {
  // app/_utils.js
  var $ = (id) => document.getElementById(id);
  var $$ = (selector) => document.querySelectorAll(selector);
  var random = () => Math.round(new Date().getTime() / Math.random());
  var elem = (tagname, attributes = {}, children = []) => {
    let result = document.createElement(tagname);
    Object.entries(attributes).map(([key, value]) => result[key] = value);
    children.map((child) => result.append(child));
    return result;
  };
  var ls = (key, value) => value === void 0 ? JSON.parse(localStorage.getItem(key)) : localStorage.setItem(key, JSON.stringify(value));
  var createDownload = (item) => {
    let blob = new Blob([JSON.stringify(item)], { type: "application/json" });
    return URL.createObjectURL(blob);
  };
  var show = (elem2) => elem2.classList.remove("invisible");
  var hide = (elem2) => elem2.classList.add("invisible");

  // app/_keystrokes.js
  function handleKeydown(event, item) {
    let target = event.target;
    let value = target.value;
    let cursorPosition = target.selectionEnd;
    let currentItemIndex = state_default.items.indexOf(item);
    let prevIndex = currentItemIndex - 1;
    let nextIndex = currentItemIndex + 1;
    switch (event.key) {
      case "Backspace":
        if (cursorPosition === 0 && state_default.items.length > 1) {
          event.preventDefault();
          let previousItem = state_default.items[prevIndex];
          let previousItemName = previousItem ? previousItem.name : "";
          if (previousItem) {
            previousItem.name = previousItemName + value;
            state_default.focusTo(prevIndex, previousItemName.length);
          } else
            state_default.focusTo(currentItemIndex, 0);
          item.delete();
        }
        break;
      case "Enter":
        let newItemName = value.slice(cursorPosition);
        let newItemIndex = currentItemIndex + 1;
        item.name = value.substr(0, cursorPosition);
        state_default.addItem(new Item({ name: newItemName }), newItemIndex);
        state_default.focusTo(newItemIndex, 0);
        break;
      case "ArrowUp":
        if (!state_default.items[prevIndex])
          break;
        event.preventDefault();
        state_default.focusTo(prevIndex, cursorPosition);
        break;
      case "ArrowDown":
        if (!state_default.items[nextIndex])
          break;
        event.preventDefault();
        state_default.focusTo(nextIndex, cursorPosition);
        break;
    }
  }

  // app/_render.js
  var render_default = render = () => {
    state_default.element.innerHTML = "";
    state_default.items.forEach((item, index) => {
      let checkbox = elem("input", { type: "checkbox", checked: item.done });
      checkbox.oninput = (event) => item.done = event.target.checked;
      checkbox.onmousedown = drag.started;
      checkbox.ontouchstart = drag.started;
      let nameInput = elem("input", { type: "text", value: item.name, placeholder: "Untitled" });
      if (index == 0)
        nameInput.autofocus = true;
      nameInput.oninput = (event) => item.name = event.target.value;
      nameInput.onkeydown = (event) => handleKeydown(event, item);
      let itemElement = elem("li", { id: item.id }, [checkbox, nameInput]);
      state_default.element.append(itemElement);
      state_default.save();
    });
  };

  // app/_classes.js
  var Checklist = class {
    constructor(element, items) {
      this.element = element;
      this.items = items || [];
    }
    save() {
      ls("checklist", this.items);
      const exportLink = $("export");
      exportLink.href = createDownload(state_default);
      exportLink.download = `big_list_${new Date().toLocaleDateString()}.json`;
    }
    focusTo(index, cursorPosition) {
      setTimeout(() => {
        let itemElement = $(this.items[index].id);
        let itemNameInput = itemElement.querySelector(`input[type="text"]`);
        itemNameInput.focus();
        itemNameInput.setSelectionRange(cursorPosition, cursorPosition);
      }, 5);
    }
    addItem(item = new Item(), index = this.items.length) {
      this.items.splice(index, 0, item);
      render_default();
      this.focusTo(index);
    }
  };
  var Item = class {
    constructor(options = {}) {
      this.id = random();
      this.name = options.name || "";
      this.done = options.done || false;
    }
    delete() {
      let index = state_default.items.indexOf(this);
      state_default.items.splice(index, 1);
      render_default();
    }
  };

  // app/_state.js
  var checklistElement = $("checklist");
  var recovered = ls("checklist");
  var initialItems = recovered ? recovered.map((opts) => new Item(opts)) : [new Item()];
  var checklist = new Checklist(checklistElement, initialItems);
  var state_default = checklist;

  // app/_drag.js
  var holding = false;
  var holdingWaiter;
  var itemNewIndex = 0;
  var startHoldingWaiter = (element) => holdingWaiter = setTimeout(() => holding = element, 250);
  var drag_default = drag = {
    started(event) {
      startHoldingWaiter(event.target.closest("li"));
    },
    moved(event) {
      requestAnimationFrame(() => {
        if (!holding)
          return;
        document.documentElement.classList.add("noscroll");
        itemNewIndex = 0;
        let isTouch = event.touches;
        let pointerPositionY = isTouch ? event.touches[0].pageY : event.clientY;
        holding.classList.add("drug");
        for (let itemElement of $$("li:not(.drug)")) {
          let rect = itemElement.getBoundingClientRect();
          let rectMiddle = rect.top + rect.height / 2;
          let pointerIsAbove = rectMiddle > pointerPositionY;
          itemElement.classList.toggle("shift", pointerIsAbove);
          if (!pointerIsAbove)
            itemNewIndex += 1;
        }
      });
    },
    ended() {
      if (holding) {
        let item = state_default.items.find((item2) => item2.id == holding.id);
        let itemOldIndex = state_default.items.indexOf(item);
        state_default.items.splice(itemOldIndex, 1);
        state_default.items.splice(itemNewIndex, 0, item);
        render_default();
      }
      clearTimeout(holdingWaiter);
      document.documentElement.classList.remove("noscroll");
      $$("li").forEach((itemElement) => itemElement.className = "");
      holding = false;
    }
  };

  // app/_portability.js
  var importedList = [];
  var configureImport = () => {
    let dialogue = $("configureImportDialogue");
    show(dialogue);
    function importItems() {
      importedList.map((opts) => state_default.items.push(new Item(opts)));
      hide(dialogue);
      render_default();
    }
    $("combine").onclick = importItems;
    $("replace").onclick = () => {
      state_default.items = [];
      importItems();
    };
  };
  var handleFileImport = (event) => {
    var _a;
    let file;
    let reader = new FileReader();
    if ((_a = event.dataTransfer) == null ? void 0 : _a.items) {
      event.preventDefault();
      file = event.dataTransfer.items[0].getAsFile();
    } else if (event.dataTransfer) {
      event.preventDefault();
      file = event.dataTransfer.files[0];
    } else
      file = event.target.files[0];
    reader.onerror = (err) => alert(`Error importing list: ${err}`);
    reader.onload = function() {
      importedList = JSON.parse(this.result).items;
      configureImport();
    };
    reader.readAsText(file);
  };
  var handlePasteImport = (event) => {
    let dialogue = $("pasteImportDialogue");
    let textarea = dialogue.querySelector("textarea");
    show(dialogue);
    $("importPastedText").onclick = () => {
      try {
        importedList = JSON.parse(textarea.value).items;
      } catch (err) {
        console.log("Error parsing JSON. Importing as plain text.");
        let lines = textarea.value.split("\n");
        importedList = lines.map((line) => new Item({ name: line }));
      }
      hide(dialogue);
      configureImport();
    };
  };

  // app/app.js
  var currentTheme = ls("theme");
  var themeToggles = $$("[data-theme]");
  document.body.classList.add(currentTheme);
  themeToggles.forEach((btn) => btn.onclick = () => {
    let theme = btn.getAttribute("data-theme");
    document.body.className = theme;
    ls("theme", theme);
  });
  ontouchmove = drag_default.moved;
  onmousemove = drag_default.moved;
  ontouchend = drag_default.ended;
  onmouseup = drag_default.ended;
  var importFileInput = $("importFile");
  var importPasteButton = $("importPaste");
  importFileInput.oninput = handleFileImport;
  importPasteButton.onclick = handlePasteImport;
  addEventListener("beforeunload", () => state_default.save());
  setInterval(() => document.hidden ? null : state_default.save(), 2e3);
  render_default();
})();
